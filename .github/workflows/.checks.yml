name: Checks
on: { workflow_call: {} }

permissions: { contents: read, actions: write }

env:
  CI: "true"
  CARGO_TERM_COLOR: "always"
  RUST_BACKTRACE: "1"

jobs:
  fmt:
    runs-on: ${{ vars.RUNS_ON }}
    steps:
      - &checkout { uses: actions/checkout@v4 }
      - &prep { name: Prepare cache dirs, run: mkdir -p .cache/cargo .cache/target }
      - &restore
        name: Restore checks-cache
        id: checks_cache
        uses: actions/cache/restore@v4
        with:
          path: |
            .cache/cargo
            .cache/target
          key: checks-cache-${{ runner.os }}-rust-1.90-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            checks-cache-${{ runner.os }}-rust-1.90-
      - name: Invoke
        uses: Mad-Pixels/github-workflows/actions/taskfile-runner@v1
        with: { command: cargo/fmt }

  clippy:
    runs-on: ${{ vars.RUNS_ON }}
    steps:
      - *checkout
      - *prep
      - *restore
      - name: Invoke
        uses: Mad-Pixels/github-workflows/actions/taskfile-runner@v1
        with: { command: cargo/clippy }

  test:
    runs-on: ${{ vars.RUNS_ON }}
    needs: [fmt, clippy]
    steps:
      - *checkout
      - *prep
      - *restore
      - name: Invoke
        uses: Mad-Pixels/github-workflows/actions/taskfile-runner@v1
        with: { command: cargo/test }
      - name: Save checks-cache
        if: steps.checks_cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: |
            .cache/cargo
            .cache/target
          key: checks-cache-${{ runner.os }}-rust-1.90-${{ hashFiles('**/Cargo.lock') }}